;;
;; Header files for Iselia
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $BuySpin$_load
(slice, ((int))) $BuySpin$_load(slice sc_0) inline;

;; $ChangeAdmin$_load
(slice, ((slice))) $ChangeAdmin$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int, slice))) $Withdraw$_load(slice sc_0) inline;

;; $TransferEvent$_store
builder $TransferEvent$_store(builder build_0, (int, slice) v) inline;

;; $TransferEvent$_store_cell
cell $TransferEvent$_store_cell((int, slice) v) inline;

;; $SpinBuyEvent$_store
builder $SpinBuyEvent$_store(builder build_0, (int, slice) v) inline;

;; $SpinBuyEvent$_store_cell
cell $SpinBuyEvent$_store_cell((int, slice) v) inline;

;; $Iselia$_store
builder $Iselia$_store(builder build_0, (slice, cell, int, int) v) inline;

;; $Iselia$_load
(slice, ((slice, cell, int, int))) $Iselia$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Iselia$init$_load
(slice, ((slice))) $Iselia$init$_load(slice sc_0) inline;

;; $Iselia$_contract_init
(slice, cell, int, int) $Iselia$_contract_init(slice $admin) impure inline_ref;

;; $Iselia$_contract_load
(slice, cell, int, int) $Iselia$_contract_load() impure inline_ref;

;; $Iselia$_contract_store
() $Iselia$_contract_store((slice, cell, int, int) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Iselia$_fun_arrPush
((slice, cell, int, int), ()) $Iselia$_fun_arrPush((slice, cell, int, int) $self, slice $address, int $balance) impure inline_ref;

;; $Iselia$_fun_contractBalance
((slice, cell, int, int), int) $Iselia$_fun_contractBalance((slice, cell, int, int) $self) impure inline_ref;

;; $Iselia$_fun_adminAddress
((slice, cell, int, int), slice) $Iselia$_fun_adminAddress((slice, cell, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Iselia$_fun_forward
((slice, cell, int, int), ()) $Iselia$_fun_forward((slice, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Iselia$_fun_notify
((slice, cell, int, int), ()) $Iselia$_fun_notify((slice, cell, int, int) $self, cell $body) impure inline;

;; $SpinBuyEvent$_constructor_amount_sender
((int, slice)) $SpinBuyEvent$_constructor_amount_sender(int $amount, slice $sender) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $TransferEvent$_constructor_amount_recipient
((int, slice)) $TransferEvent$_constructor_amount_recipient(int $amount, slice $recipient) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
